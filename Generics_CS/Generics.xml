<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Generics</name>
    </assembly>
    <members>
        <member name="T:Generics.ReasonCodeValue">
            <completionlist cref="T:Generics.ReasonCodeValue"/>
        </member>
        <member name="T:Generics.FunctionResult">
            <summary>
            ProcedureResult that includes an object to allow for passing of untyped data out of a procedure
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Generics.FunctionResult`1">
            <summary>
            ProcedureResult that includes a generic to allow for passing of typed data out of a procedure
            </summary>
            <typeparam name="T"></typeparam>
            <remarks></remarks>
        </member>
        <member name="M:Generics.GenericMethods.ConvertListToArray``2(System.Collections.Generic.List{``0},System.Converter{``0,``1})">
            <summary>
            Convert a list of one type to an array of another type
            </summary>
            <typeparam name="L"></typeparam>
            <typeparam name="A"></typeparam>
            <param name="Items"></param>
            <param name="Conversion"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Generics.GenericMethods.ConvertArrayToList``2(``0[],System.Converter{``0,``1})">
            <summary>
            Convert an array of one type to a list of another type
            </summary>
            <typeparam name="A"></typeparam>
            <typeparam name="L"></typeparam>
            <param name="Items"></param>
            <param name="Conversion"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Generics.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Generics.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Generics.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="M:Generics.PleaseWaitDialog.#ctor">
            <summary>
            Delegate for callback function
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Generics.PleaseWaitDialog.Setup(Generics.PleaseWaitDialog.PleaseWaitCallback@,System.UInt16,System.UInt16)">
            <summary>
            Shows the please wait dialog while calling the callback function regularly as determined by the IntervalMilliseconds. 
            Will close when the callback function returns true or after approximately TimeoutMilliseconds have elapsed
            </summary>
            <param name="CallbackFunction"></param>
            <param name="TimeoutMilliseconds"></param>
            <param name="IntervalMilliseconds"></param>
            <remarks></remarks>
        </member>
        <member name="M:Generics.PleaseWaitDialog.myTimer_Tick(System.Object,System.EventArgs)">
            <summary>
            Every time this comes round invoke the callback function and check the result, if the result is true or we have run out of time close the dialog
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <remarks></remarks>
        </member>
        <member name="T:ItemList">
            <summary>
            Class that inherits from a simple list. Demonstrates how to implement a constructor that takes a list.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ItemList.#ctor">
            <summary>
            Default constructor
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ItemList.#ctor(System.Collections.Generic.List{System.String})">
            <summary>
            We want a constructor that takes a list of strings.
            </summary>
            <param name="items"></param>
            <remarks></remarks>
        </member>
    </members>
</doc>
