
When the model is used to 'Generate Database from Model' the tool modifies App.Config by adding a connectionStrings section if required and a connectionString entry like this:

  <connectionStrings>
    <add name="DataModelContainer" connectionString="metadata=res://*/DataModel.csdl|res://*/DataModel.ssdl|res://*/DataModel.msl;provider=System.Data.SqlClient;provider connection string=&quot;data source=CROY201117\sqlexpress;initial catalog=MyPatterns;integrated security=True;multipleactiveresultsets=True;App=EntityFramework&quot;" providerName="System.Data.EntityClient" />
  </connectionStrings>

There are several variations on how code is generated but the recommended template is the EF4.x DbContext Generator from Entity Framework 4.0/4.3
http://blogs.msdn.com/b/adonet/archive/2011/09/28/ef-4-2-model-amp-database-first-walkthrough.aspx

  
How to: Customize Object-Layer Code Generation (Entity Data Model Designer) - http://msdn.microsoft.com/en-us/library/dd456821.aspx

DataModel.edmx is the model
	Right-click > Add Code Generation Item > select new item to create one of the following templates to generate object layer code.

--- EF5.x DbContext Generator (Entity Framework 5.0)
Latest generator


--- EF4.x DbContext Generator (Entity Framework 4.0/4.3)
http://blogs.msdn.com/b/adonet/archive/2011/03/15/ef-4-1-model-amp-database-first-walkthrough.aspx

Creates a simple POCO model as per the POCO generator above and a context derived from DbContext to use for querying and persisting data.
This is the recommended template for Entity Framework 4.3.1+


--- All the following templates are deprecated ---

--- ADO.NET EntityObject Generator Template (Entity Framework 1.0) - http://msdn.microsoft.com/en-us/library/ff477605.aspx

The ADO.NET EntityObject Generator template generates the same code as the default code generated by the Entity Designer. 
The ADO.NET EntityObject Generator template consists of one text template file: <model name>.tt. 
The <model name>.tt template outputs one source file, <model name>.cs (or .vb), which appears under <model name>.tt in Solution Explorer.


--- ADO.NET Self-Tracking Entity Generator Template (Entity Framework 4.0) - http://msdn.microsoft.com/en-us/library/ff477604.aspx

The ADO.NET Self-Tracking Entity Generator template generates the object-layer code that consists of the typed ObjectContext and entity classes that contain self-tracking state logic. 
Use self-tracking entities when working with N-tier applications. For more information, see Working with Self-Tracking Entities (Entity Framework)(http://msdn.microsoft.com/en-us/library/ff407090.aspx) and 
Walkthrough: Serialize Self-Tracking Entities (Entity Framework) (http://msdn.microsoft.com/en-us/library/ee789839.aspx).

The ADO.NET Self-Tracking Entity Generator template consists of two text template files: <model name>.tt and <model name>.Context.tt. 
The <model name>.Context.tt template generates the typed ObjectContext. The <model name>.tt template generates the self-tracking entity types. 

Both text templates begin with built-in directives that instruct the text template processing engine how to process the template. 
Note, that the text templates include the .ttinclude file. The .ttinclude file contains utility classes that help the ADO.NET templates with the code generation process. 


--- EF4.x POCO Entity Generator (Entity Framework 4.1/4.3)
http://blogs.msdn.com/b/adonet/archive/2010/01/25/walkthrough-poco-template-for-the-entity-framework.aspx

The POCO Template can be used to generate persistence ignorant entity types from an Entity Data Model.
When you choose the POCO Template two T4 template files are added to your project.
The <model name>.tt file is responsible for generating a file for each EntityType and ComplexType in the <model name>.edmx model.
<model name>.tt also generates a file called <model name>.vb, which contains a FixupCollection<T> class used by the POCO classes to keep the opposite ends of a relationships in sync.
The second template (<model name>.Context.tt) produces a strongly typed ObjectContext for the <model name>.edmx model. You use this strongly typed ObjectContext to interact with your database.


